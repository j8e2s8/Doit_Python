---
title: '**다섯째마당. 데이터 과학의 세계**'
jupyter:
  jupytext:
    cell_metadata_filter: 'echo,eval,-all'
    notebook_metadata_filter: '-all'
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

---
---


# 14 통계 분석 기법을 이용한 가설 검정

## 14-1 가설 검정이란?

## 14-2 t 검정 - 두 집단의 평균 비교하기

### compact 자동차와 suv 자동차의 도시 연비 t 검정

```{python}
#| eval: false
import pandas as pd
mpg = pd.read_csv('mpg.csv')
```

```{python}
#| eval: false
## 기술 통계 분석

# compact, suv 추출하기
# category별 분리
# 빈도 구하기
# cty 평균 구하기
mpg.query('category in ["compact", "suv"]') \
   .groupby('category', as_index = False) \
   .agg(n    = ('category', 'count'),
        mean = ('cty', 'mean'))
```

```{python}
compact = mpg.query('category == "compact"')['cty']
suv = mpg.query('category == "suv"')['cty']
```

```{python}
# t-test
from scipy import stats
stats.ttest_ind(compact, suv, equal_var = True)
```

### 일반 휘발유와 고급 휘발유의 도시 연비 t 검정

```{python}
## 기술 통계 분석

# r, p 추출하기
# fl별 분리
# 빈도 구하기
# cty 평균 구하기
mpg.query('fl in ["r", "p"]') \
   .groupby('fl', as_index = False) \
   .agg(n    = ('category', 'count'),
        mean = ('cty', 'mean'))
```

```{python}
regular = mpg.query('fl == "r"')['cty']
premium = mpg.query('fl == "p"')['cty']
```

```{python}
# t-test
stats.ttest_ind(regular, premium, equal_var = True)
```

## 14-3 상관분석 - 두 변수의 관계 분석하기

### 실업자 수와 개인 소비 지출의 상관관계

#### 1. 상관계수 구하기

```{python}
#| eval: false
# economics 데이터 불러오기
economics = pd.read_csv('economics.csv')

# 상관행렬 만들기
economics[['unemploy', 'pce']].corr()
```

#### 2. 유의확률 구하기

```{python}
# 상관분석
stats.pearsonr(economics['unemploy'], economics['pce'])
```

### 상관행렬 히트맵 만들기

#### 1. 상관행렬 만들기

```{python}
#| eval: false
mtcars = pd.read_csv('mtcars.csv')
mtcars.head()
```

```{python}
car_cor = mtcars.corr()      # 상관행렬 만들기
car_cor = round(car_cor, 2)  # 소수점 둘째 자리까지 반올림
car_cor
```

#### 2. 히트맵 만들기

```{python}
#| eval: false
import matplotlib.pyplot as plt
plt.rcParams.update({'figure.dpi' : '120',           # 해상도 설정
                     'figure.figsize': [7.5, 5.5]})  # 가로 세로 크기 설정
```

```{python}
#| eval: false
# 히트맵 만들기
import seaborn as sns
sns.heatmap(car_cor,
            annot = True,   # 상관계수 표시
            cmap = 'RdBu')  # 컬러맵
```

#### 3. 대각 행렬 제거하기

**(1) mask 만들기**

```{python}
# mask 만들기
import numpy as np
mask = np.zeros_like(car_cor)
mask
```

```{python}
# 오른쪽 위 대각 행렬을 1로 바꾸기
mask[np.triu_indices_from(mask)] = 1
mask
```

**(2) 히트맵에 mask 적용하기**

```{python}
#| eval: false
# 히트맵 만들기
sns.heatmap(data = car_cor,
            annot = True,   # 상관계수 표시
            cmap = 'RdBu',  # 컬러맵
            mask = mask)    # mask 적용
```

**(3) 빈 행과 열 제거하기**

```{python}
#| eval: false
mask_new = mask[1:, :-1]         # mask 첫 번째 행, 마지막 열 제거
cor_new = car_cor.iloc[1:, :-1]  # 상관행렬 첫 번째 행, 마지막 열 제거

# 히트맵 만들기
sns.heatmap(data = cor_new,
            annot = True,       # 상관계수 표시
            cmap = 'RdBu',      # 컬러맵
            mask = mask_new)    # mask 적용
```

```{python}
#| eval: false
# 히트맵 만들기
sns.heatmap(data = cor_new,
            annot = True,               # 상관계수 표시
            cmap = 'RdBu',              # 컬러맵
            mask = mask_new,            # mask 적용
            linewidths = .5,            # 경계 구분선 추가
            vmax = 1,                   # 가장 진한 파란색으로 표현할 최대값
            vmin = -1,                  # 가장 진한 빨간색으로 표현할 최소값
            cbar_kws = {'shrink': .5})  # 범례 크기 줄이기
```

